// ==UserScript==
// @name         Turtlogs Data Parser
// @namespace    http://tampermonkey.net/
// @version      1.6
// @description  –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å turtlogs.com
// @author       Wht Mst
// @match        https://www.turtlogs.com/viewer/*
// @grant        GM_setClipboard
// @grant        GM_notification
// ==/UserScript==

(function() {
    'use strict';

    window.addEventListener('load', function() {
        setTimeout(addExportButton, 2000);
    });

    function addExportButton() {
        if (document.getElementById('turtlogs-export-btn')) return;

        const button = document.createElement('button');
        button.id = 'turtlogs-export-btn';
        button.textContent = 'üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö';
        button.style.cssText = `
            position: fixed;
            top: 65px;
            right: 25px;
            z-index: 9999;
            padding: 12px 16px;
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            transition: all 0.3s ease;
        `;

        button.addEventListener('mouseover', function() {
            this.style.background = '#45a049';
            this.style.transform = 'translateY(-2px)';
        });

        button.addEventListener('mouseout', function() {
            this.style.background = '#4CAF50';
            this.style.transform = 'translateY(0)';
        });

        button.onclick = function() {
            exportCombatData();
        };

        document.body.appendChild(button);
    }

    function exportCombatData() {
        const data = parseCombatDataFixed();

        if (data.damage.length === 0 && data.healing.length === 0) {
            showNotification('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.', 'error');
            return;
        }

        const output = formatDataForExport(data);

        if (typeof GM_setClipboard !== 'undefined') {
            GM_setClipboard(output);
        } else {
            navigator.clipboard.writeText(output);
        }

        showNotification(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã! –£–í–°: ${data.damage.length}, –ò–í–°: ${data.healing.length}`, 'success');
    }

    function showNotification(message, type) {
        if (typeof GM_notification !== 'undefined') {
            GM_notification({
                text: message,
                title: 'Turtlogs Parser',
                timeout: 3000
            });
        } else {
            alert(message);
        }
    }

    function formatDataForExport(data) {
        let output = '=== DAMAGE DONE DATA ===\n';
        data.damage.forEach(item => {
            output += `${item.rank}. ${item.name} - ${item.damage} (${item.dps}/s) - ${item.percentage}\n`;
        });

        output += '\n=== EFFECTIVE HEALING DONE DATA ===\n';
        data.healing.forEach(item => {
            output += `${item.rank}. ${item.name} - ${item.healing} (${item.hps}/s) - ${item.percentage}\n`;
        });

        output += `\n=== SUMMARY ===\n`;
        output += `Total damage entries: ${data.damage.length}\n`;
        output += `Total healing entries: ${data.healing.length}\n`;
        output += `Exported: ${new Date().toLocaleString()}`;

        return output;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–ê–†–°–ï–†
    function parseCombatDataFixed() {
        const bars = document.querySelectorAll('.bar');
        const result = {
            damage: [],
            healing: []
        };

        console.log(`Found ${bars.length} bars`);

        bars.forEach((bar, index) => {
            const text = bar.textContent.trim();
            console.log(`Parsing: "${text}"`);

            const rankMatch = text.match(/^(\d+)\./);
            if (!rankMatch) return;

            const rank = parseInt(rankMatch[1]);
            let remaining = text.substring(rankMatch[0].length);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è (–¥–æ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞)
            let name = '';
            let i = 0;
            while (i < remaining.length && (isNaN(remaining[i]) || remaining[i] === ' ' || remaining[i] === '(')) {
                name += remaining[i];
                i++;
            }
            name = name.trim();

            // –û—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å: —á–∏—Å–ª–∞
            remaining = remaining.substring(i);

            let damage, dps, percentage;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø—è—Ç–∞—è
            const hasComma = remaining.includes(',');

            if (hasComma) {
                // –§–û–†–ú–ê–¢ –° –ó–ê–ü–Ø–¢–û–ô
                // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–ø—è—Ç–æ–π
                const commaIndex = remaining.indexOf(',');

                // damage –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                const damageEnd = commaIndex + 4; // ",669" -> 4 —Å–∏–º–≤–æ–ª–∞
                damage = remaining.substring(0, damageEnd); // "94,669"

                // –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ damage
                let numbersPart = remaining.substring(damageEnd); // "554.0/s5.5%"

                // –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ—á—å DPS
                // DPS –º–æ–∂–µ—Ç –±—ã—Ç—å: "554.0" (3 —Ü–∏—Ñ—Ä—ã + . + 1 —Ü–∏—Ñ—Ä–∞) –ò–õ–ò "69.1" (2 —Ü–∏—Ñ—Ä—ã + . + 1 —Ü–∏—Ñ—Ä–∞)
                const slashIndex = numbersPart.indexOf('/s');
                if (slashIndex === -1) return;

                const beforeSlash = numbersPart.substring(0, slashIndex); // "554.0" –∏–ª–∏ "69.1"

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏–Ω—É DPS –ø–æ —Ñ–æ—Ä–º–∞—Ç—É X.X
                const dotIndex = beforeSlash.indexOf('.');
                if (dotIndex === -1) return;

                // DPS –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "XXX.X" –∏–ª–∏ "XX.X"
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä –¥–æ —Ç–æ—á–∫–∏
                if (dotIndex === 3) {
                    // –§–æ—Ä–º–∞—Ç "554.0" - –±–µ—Ä–µ–º –≤—Å–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
                    dps = beforeSlash.substring(0, 5);
                } else if (dotIndex === 2) {
                    // –§–æ—Ä–º–∞—Ç "69.1" - –±–µ—Ä–µ–º –≤—Å–µ 4 —Å–∏–º–≤–æ–ª–∞
                    dps = beforeSlash.substring(0, 4);
                } else {
                    dps = beforeSlash;
                }

                // –ü—Ä–æ—Ü–µ–Ω—Ç
                numbersPart = numbersPart.substring(slashIndex + 2);
                const percentMatch = numbersPart.match(/(\d+\.\d+)%$/);
                percentage = percentMatch ? percentMatch[1] + '%' : '0%';

            } else {
                // –§–û–†–ú–ê–¢ –ë–ï–ó –ó–ê–ü–Ø–¢–û–ô
                const slashIndex = remaining.indexOf('/s');
                if (slashIndex === -1) return;

                const beforeSlash = remaining.substring(0, slashIndex);
                const afterSlash = remaining.substring(slashIndex + 2);

                // dps –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–∏–º–≤–æ–ª–∞ –ø–µ—Ä–µ–¥ /s
                dps = beforeSlash.substring(beforeSlash.length - 3);
                damage = beforeSlash.substring(0, beforeSlash.length - 3);

                // –ü—Ä–æ—Ü–µ–Ω—Ç
                const percentMatch = afterSlash.match(/(\d+\.\d+)%$/);
                percentage = percentMatch ? percentMatch[1] + '%' : '0%';
            }

            if (!damage || !dps) {
                console.log('Failed to parse:', text);
                return;
            }

            const data = {
                rank: rank,
                name: name,
                dps: dps,
                percentage: percentage
            };

            if (index <= 37) {
                result.damage.push({
                    ...data,
                    damage: damage
                });
            } else {
                result.healing.push({
                    ...data,
                    healing: damage,
                    hps: dps
                });
            }

            console.log(`Parsed: ${rank}. ${name} - ${damage} (${dps}/s) - ${percentage}`);
        });

        return result;
    }

    let lastUrl = location.href;
    new MutationObserver(() => {
        const url = location.href;
        if (url !== lastUrl) {
            lastUrl = url;
            setTimeout(addExportButton, 1000);
        }
    }).observe(document, {subtree: true, childList: true});

})();
